<?php
/**
 * Implementation of hook_menu().
 */
function vk_openapi_menu() {

  $items['admin/settings/vk_openapi'] = array(
    'title' => 'vKontakte OpenAPI', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('vk_openapi_admin_settings'), 
    'access arguments' => array('administer site configuration'),
    'file' => 'vk_openapi.admin.inc',
  );
  
  $items['vk/login'] = array(
    'page callback' => 'vk_openapi_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['vk/login/error'] = array(
    'page callback' => 'vk_openapi_login_error',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  // Unite new account, created via vkontakte, with existing drupal account:
  // in first step user has created account via vkontakte in second step 
  // this account unite with existing account
  $items['vk/unite'] = array(
    'page callback' => 'vk_openapi_unite_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['vk/unite/dsma'] = array(
    'page callback' => 'vk_openapi_dont_show_unite_message_again',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['vk/xd_receiver'] = array(
    'page callback' => 'vk_openapi_receiver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['vk/enter-e-mail'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vk_enter_email'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['vk/confirm'] = array(
    'page callback' => '_vk_confirm_email',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['user/%user/vk'] = array(
    'title' => 'VK',
    'page callback' => 'vk_user_data',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  // unite existing drupal account with vkontakte:
  // in first step user create account via drupal, then this account linking with vkontakte account
  $items['vk/succesfull-unite'] = array(
    'page callback' => '_vk_unite_drupal_and_vk_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['vk/error-unite'] = array(
    'page callback' => '_vk_error_unite_drupal_and_vk_accounts',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function vk_openapi_theme() {
  return array(
    'vk_openapi_receiver' => array(
      'arguments' => array(),
      'template'      => 'vk-openapi-receiver',
    ),
    'vk_openapi_init_anon' => array(
      'arguments' => array('user' => NULL, 'path' => NULL, 'apiID' => NULL),
      'template' => 'vk-openapi-init-anon',
    ),
    'vk_openapi_init_auth' => array(
      'arguments' => array('user' => NULL, 'path' => NULL, 'apiID' => NULL, 'v' => NULL),
      'template' => 'vk-openapi-init-auth',
    ),
  );
}

/**
 * Implementation of hook_init()
 */
function vk_openapi_init() {
  global $user;
  
  // variable $theme doesn't exist yet on this step, in this reason I add next css and js  files without any of checks
  $user_data = unserialize($user->data);
  if (!$user->uid || ($user->uid && $user_data['vk_data']['vkuid'])) {
    drupal_add_js(drupal_get_path('module', 'vk_openapi') . "/openapi.js");
    drupal_add_css(drupal_get_path('module', 'vk_openapi') . "/vk_openapi.css");
  }
  
  if (variable_get('vk_openapi_add_js', 0)) {
    drupal_set_html_head('<script type="text/javascript" src="http://userapi.com/js/api/openapi.js?1"></script>');
    drupal_set_html_head('<script type="text/javascript">VK.init({apiId: ' . trim(variable_get('vk_openapi_app_id', '')) . ', onlyWidgets: TRUE});</script>');
  }
}


/**
 * Implementation of hook_footer()
 */
function vk_openapi_footer($main = 0) {
  global $base_url, $user, $theme;
  $allowed_themes = variable_get('vk_openapi_themes_list', 1);
  
  if ((!is_array($allowed_themes) && $allowed_themes == 1) || (in_array(1, $allowed_themes) || in_array($theme, $allowed_themes))) {
    if (!$user->uid) {
      return theme('vk_openapi_init_anon', $user, base_path() . "vk/xd_receiver", trim(variable_get('vk_openapi_app_id', '')));
    } 
    else {
      $user_data = unserialize($user->data);
      if ($user_data['vk_data']['vkuid'] && $user_data['vk_data']['last_update']) {
        if (time() - $user_data['vk_data']['last_update'] > variable_get('vk_openapi_update_freq', 60)) {
          // renew data for registered user
          $vk_data = _vk_get_user_data($user_data['vk_data']['vkuid']);
          $vk_data['last_update'] = time();
  
          $array = array('vk_data' => $vk_data);
  
          if ($vk_data['vkontakte_avatar']) {
            $array['picture'] = $vk_data['vkontakte_avatar'];
          }
          
          user_save($user, $array);
        }
        return theme('vk_openapi_init_auth', $user, base_path() . "vk/xd_receiver", trim(variable_get('vk_openapi_app_id', '')));
      }
      else {
        return '';
      }
    }
  }
}

function vk_openapi_receiver() {
  print theme('vk_openapi_receiver');
}

function _vk_get_user_data($vkuid) {
  $vk_data = array();
  
  include(drupal_get_path('module', 'vk_openapi') . '/vkapi.class.php');
  $VK = new vkapi(trim(variable_get('vk_openapi_app_id', '')), trim(variable_get('vk_openapi_secret_key', '')));
  $resp = $VK->api('getProfiles', array('uids' => $vkuid, 'fields' => 'nickname,sex,bdate,city,country,timezone,photo,photo_medium,photo_big,has_mobile,rate,contacts,education,home_phone,mobile_phone,university,university_name,faculty,faculty_name,graduation'));
  
  $vk_data = $resp['response'][0];
  $vk_data['vkuid'] = $vk_data['uid'];
  unset($vk_data['uid']);
  
  $avatar = FALSE;
  if (variable_get('vk_openapi_avatar', 0) && $vk_data['photo'] && variable_get('user_pictures', 0)) {
    switch (variable_get('vk_openapi_avatar', 0)) {
      case 1:
        $path = $vk_data['photo'];
        break;
      case 2:
        $path = $vk_data['photo_medium'];
        break;  
      case 3:
        $path = $vk_data['photo_big'];
        break;  
    }
    $avatar = _vk_openapi_save_remote_image($path);
  }
  
  if ($avatar) {
    $vk_data['vkontakte_avatar'] = $avatar;
  }

  return $vk_data;
}

function vk_openapi_login() {
  $member = authOpenAPIMember();

  if ($member !== FALSE) {
    $vkuid = $_POST['uid'];

    $vk_data = _vk_get_user_data($vkuid);
    $vk_data['last_update'] = time();
    
    $r = db_fetch_object(db_query("SELECT uid FROM {vkontakte_users} WHERE vkuid = %d", $vkuid));
    $newuser = FALSE;
    if (!$r->uid) {
      $vk_data['confirmed'] = FALSE;
      // create new user
      $account = new stdClass();

      $account->name = variable_get('vk_openapi_username', '%first_name %last_name_lq%nickname%last_name_rq %last_name');
      $account->name = str_replace('%first_name', $vk_data['first_name'], $account->name);
      $account->name = str_replace('%last_name', $vk_data['last_name'], $account->name);
      if (mb_strlen($nickname)) {
        $account->name = str_replace('%nickname_lq', variable_get('vk_openapi_nickname_lq', '«'), $account->name);
        $account->name = str_replace('%nickname_rq', variable_get('vk_openapi_nickname_rq', '»'), $account->name);
        $account->name = str_replace('%nickname', $vk_data['nickname'], $account->name);
      }
      else {
        $account->name = str_replace('%nickname_lq', '', $account->name);
        $account->name = str_replace('%nickname_rq', '', $account->name);
        $account->name = str_replace('%nickname', '', $account->name);
      }
      
      $account->name = str_replace('  ', ' ', $account->name);

      $account->name = _vk_openapi_check_name($account->name);
      $array = array(
        'name' => $account->name,
        'pass' => user_password(),
        'status' => variable_get('user_register', 1),
        'vk_data' => $vk_data,
        'vk_show_unite_message' => TRUE,
        'mail' => $vkuid . '@vkontakte.ru',
      );
      
      if ($vk_data['vkontakte_avatar']) {
        $array['picture'] = $vk_data['vkontakte_avatar'];
      }
      
      if (!$user = user_save($account, $array)) {
        drupal_set_message(t('User create error'), 'error');
        print json_encode(array('error' => TRUE, 'exit_code' => '2', 'message' => 'user create error [2]', 'redirect_url' => variable_get('vk_openapi_redirect_url', "")));
        exit();
      }
      
      if ($rid = variable_get('vk_openapi_role_for_new_user', 0)) {
        db_query("INSERT INTO {users_roles} (`uid`, `rid`) VALUES (%d, %d)", $user->uid, $rid);
      }
      
      if ($r->count == 0) {
        db_query("INSERT INTO {vkontakte_users} (`uid`, `vkuid`, `timestamp`) VALUES (%d, %d, %d)", $user->uid, $vkuid, time());
      }
      else {
        db_query("UPDATE {vkontakte_users} SET `uid` = %d, `timestamp` = %d WHERE vkuid = %d", $user->uid, time(), $vkuid);
      }
      drupal_set_message(t('New user @name successfully created. Now you should enter your e-mail', array('@name' => $user->name)));
      $newuser = TRUE;
    }
    else {
      $user = user_load(array('uid' => $r->uid));
      $user_data = unserialize($user->data);
      
      $existing_vk_data = $user_data['vk_data'];
      $vk_data = array_merge($existing_vk_data, $vk_data);
      
      $array = array('vk_data' => $vk_data);
      
      if ($avatar) {
        $array['picture'] = $avatar;
      }
              
      user_save($user, $array);
    }
    
    //if (!$newuser || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
    if (($user->mail && $user->mail != $vkuid . '@vkontakte.ru') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      $logged_in = user_external_login($user);
    }
    else {
      $_SESSION['vk_new_user'] = $user->uid;
    }
    
    $edit = (array) $account;
    user_module_invoke('register', $edit, $account);

    if (($user->mail && $user->mail != $vkuid . '@vkontakte.ru') || !variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
      if (!$newuser && $logged_in) {
        drupal_set_message(t('@name, you successfully logged in via vKontakte account.', array('@name' => $user->name )));
      }
      exit(json_encode(array('error' => FALSE, 'exit_code' => '4', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
    }
    else {
      /*
      if (!$newuser) {
        drupal_set_message(t('You successfully logged in, but you should enter your e-mail.'));
      } else {
        if (variable_get('vk_openapi_allow_users_unite_accounts', 1)) {
          drupal_set_message(t('If you already have account you can <a href="@unite">unite their</a>', array('@unite' => url('vk/unite'))));
        }
      }
      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
      */
      exit(json_encode(array('error' => FALSE, 'exit_code' => '3', 'redirect_url' => "vk/enter-e-mail")));
    }
  }
  else {
      exit(json_encode(array('error' => TRUE, 'exit_code' => '1', 'message' => 'auth error [1]', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
  }
}

function _vk_unite_drupal_and_vk_accounts() {
  $member = authOpenAPIMember();

  if ($member !== FALSE) {
    $vkuid = $_POST['uid'];

    $vk_data = _vk_get_user_data($vkuid);
    $vk_data['last_update'] = time();
    $vk_data['confirmed'] = TRUE;

    global $user;

    $array = array('vk_data' => $vk_data);

    if ($avatar) {
      $array['picture'] = $avatar;
    }
    user_save($user, $array);
    
    db_query("INSERT INTO {vkontakte_users} (`uid`, `vkuid`, `timestamp`) VALUES (%d, %d, %d)", $user->uid, $vkuid, time());

    exit(json_encode(array('error' => FALSE, 'exit_code' => '444', 'redirect_url' => 'user/' . $user->uid . '/vk')));
  }
  else {
      exit(json_encode(array('error' => TRUE, 'exit_code' => '1', 'message' => 'auth error [2]', 'redirect_url' => variable_get('vk_openapi_redirect_url', ""))));
  }

}

function _vk_error_unite_drupal_and_vk_accounts() {
  drupal_set_message('Error uniting accounts', 'error');
  drupal_goto('user/' . $user->uid . '/vkontakte');
}

function _vk_openapi_check_name($name, $counter = 0, $original_name = '') {
  $r = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {users} WHERE LOWER(name) = LOWER('%s')", $name));
  if (!$r->count) {
    return $name;
  }
  else {
    $counter++;
    if ($original_name != '') {
      $name = $original_name;
    }    
    return _vk_openapi_check_name($name . '_' . $counter, $counter, $name);
  }
}

function authOpenAPIMember() {
  $session = array();
  $member = FALSE;
  $valid_keys = array('expire', 'mid', 'secret', 'sid', 'sig');
  $app_cookie = $_COOKIE['vk_app_' . trim(variable_get('vk_openapi_app_id', ''))];
  //watchdog('debug', 'vk_app_' . variable_get('vk_openapi_app_id', '') . ': ' . $app_cookie );
  if ($app_cookie) {
    $session_data = explode('&', $app_cookie, 10);
    foreach ($session_data as $pair) {
      list($key, $value) = explode('=', $pair, 2);
      if (empty($key) || empty($value) || !in_array($key, $valid_keys)) {
        continue;
      }
      $session[$key] = $value;
    }
    foreach ($valid_keys as $key) {
      if (!isset($session[$key])) return $member;
    }
    ksort($session);

    $sign = '';
    foreach ($session as $key => $value) {
      if ($key != 'sig') {
        $sign .= ($key . '=' . $value);
      }
    }
    $sign .= variable_get('vk_openapi_secret_key', '');
    $sign = md5($sign);
    if ($session['sig'] == $sign && $session['expire'] > time()) {
      $member = array(
        'id' => intval($session['mid']),
        'secret' => $session['secret'],
        'sid' => $session['sid'],
        'sig' => $session['sig'],
      );
    }
  }
  return $member;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vk_openapi_form_user_login_alter($form, $form_state) {
  _vk_openapi_login_form_alter($form, $form_state);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function vk_openapi_form_user_login_block_alter($form, $form_state) {
  _vk_openapi_login_form_alter($form, $form_state);
}

function _vk_openapi_login_form_alter(&$form, &$form_state) {
  if (variable_get('vk_openapi_alter_login_form', 1) == 1) {
    $form['vk_openapi_button'] = array(
      '#value' => '<div id="vk_login" class="vk_login" onclick="doLogin();"></div>',
      '#weight' => 100,
    );
  }
}

function vk_openapi_login_error() {
  drupal_set_message(t('Error connecting to vkontakte.ru server'), 'error');
  drupal_goto(variable_get('vk_openapi_redirect_url', ""));
}

/**
 * Implementation of hook_user()
 */
function vk_openapi_user($op, &$edit, &$account, $category = NULL) {  
  global $user;
  if ($op == 'view' && $account->uid == $user->uid && $account->vk_show_unite_message && variable_get('vk_openapi_allow_users_unite_accounts', 1) ) {
    drupal_set_message(t('If you already have account you can <a href="@unite">unite their</a>. <a href="@show">Dont show this message again.</a>', array('@unite' => url('vk/unite'), '@show' => url('vk/unite/dsma'))));
  }

  if ($_SESSION['vk_new_user_show_message']) {
    unset($_SESSION['vk_new_user_show_message']);
    $olduser = user_load(array('uid' => $account->vk_old_uid));
    drupal_set_message(t('Accounts united! Old user @old_user disabled, new user is @new_user', array('@old_user' => $olduser->name, '@new_user' => $account->name)));
  }
  
  if ($op == 'delete') {
    db_query("DELETE FROM {vkontakte_users} WHERE uid = %d", $account->uid);
  }
}

function vk_openapi_unite_accounts() {
  global $user;
  if ($user->vk_data && variable_get('vk_openapi_allow_users_unite_accounts', 1)) {
    return drupal_get_form('vk_openapi_acounts_unite_form');
  }
  else {
    drupal_set_message(t('You can\'t unite your account'));
    return '';
  }
}

function vk_openapi_dont_show_unite_message_again() {
  global $user;
  user_save($user, array('vk_show_unite_message' => FALSE));
  drupal_set_message(t('Data saved'));
  drupal_goto('user/' . $user->uid);
}

function vk_openapi_acounts_unite_form($form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),    
    '#default_value' => '',
    '#maxlength' => 64,
    '#prefix' => t('Using this form you can unite your vkontakte.ru account and old account from this site.'),
    '#size' => 15,
  );
  
  $form['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => '',
    '#maxlength' => 64,
    '#size' => 15,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#default_value' => '',
    '#maxlength' => 64,
    '#size' => 15,
  );
  return $form;
}

function vk_openapi_acounts_unite_form_validate($form, &$form_state) {
  if (!$user = user_load(array('name' => $form_state['values']['name'], 'pass' => $form_state['values']['pass']))) {
    form_set_error('pass', t('Incorrect username or password'));
  }
  $form_state['values']['uid'] = $user->uid;
}

function vk_openapi_acounts_unite_form_submit($form, &$form_state) {
  global $user;
  if ($newuser = user_load(array('uid' => $form_state['values']['uid']))) {  
    db_query('UPDATE {vkontakte_users} SET uid = %d WHERE uid = %d', $newuser->uid, $user->uid);
    db_query('UPDATE {comments} SET uid = %d WHERE uid = %d', $newuser->uid, $user->uid);
    db_query('UPDATE {node_revisions} SET uid = %d WHERE uid = %d', $newuser->uid, $user->uid);
    db_query('UPDATE {node} SET uid = %d WHERE uid = %d', $newuser->uid, $user->uid);
    
    $olduser = $user;
    $user = $newuser; // switch sessions

    user_save($user, array('vk_disabled_user' => FALSE, 'vk_old_uid' => $olduser->uid));
    user_save($olduser, array('status' => 0, 'vk_disabled_user' => TRUE, 'vk_new_uid' => $user->uid));

    $_SESSION['vk_new_user_show_message'] = TRUE;
    
    drupal_goto(variable_get('vk_openapi_redirect_url', ""));
  }
  else {
    drupal_set_message('uniting error', 'error');
  }
}

function _vk_openapi_save_remote_image($path_to_img) {
  $ch = curl_init($path_to_img);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);
  $rawdata = curl_exec($ch);
  curl_close($ch);
  
  $slash_pos = strrpos($path_to_img, '/');
  $avatar_name = substr($path_to_img, $slash_pos);
  
  $fullpath = file_directory_path() . '/' . variable_get('user_picture_path', 'pictures') . $avatar_name;
  
  if (!file_exists($fullpath) || (file_exists($fullpath) && @unlink($fullpath))) {
    $fp = fopen($fullpath, 'x');
    fwrite($fp, $rawdata);
    fclose($fp);
  }
  return $fullpath;
}

function vk_enter_email() {
  $form = array();
  
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your e-mail.'),
    '#default_value' => '',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  $form['#redirect'] = variable_get('site_frontpage', 'node');
  return $form;
}

function vk_enter_email_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('Wrong e-mail'));
  }
}

function vk_enter_email_submit($form, &$form_state) {
  $user = user_load(array('uid' => $_SESSION['vk_new_user']));
  unset($_SESSION['vk_new_user']);
  
  $user->mail = $form_state['values']['mail'];
  $user->pass = user_password();  
  $array['mail'] = $form_state['values']['mail'];
  $array['pass'] = user_password();  
  if (_vk_openapi_mail_notify($user)) {
    $user_data = unserialize($user->data);
    $vk_data = $user_data['vk_data'];
    $vk_data['vk_confirm_email_sent'] = TRUE;
    $array['vk_data'] = $vk_data;
    drupal_set_message(t('A confirmation email has been sent to your new email address. You must follow the link provided in that email within 24 hours in order to confirm the change to your account email address.'));
    user_external_login($user);
  }
  else {
    drupal_set_message(t('Error while sending confirmation e-mail'));
  }
  user_save($user, $array);
}

function _vk_openapi_mail_notify($user) {
  $message = array(
    'id' => 'vk_openapi_confirm_mail',
    'to' => $user->mail,
    'subject' => t('Account details for !username at !site', array('!username' => $user->name, '!site' => variable_get('site_name', 'Drupal'))),
    'body' => t("!username,\n\nThank you for registering at !site. Now you should confirm your e-mail by clicking on this link or copying and pasting it in your browser:\n\n!confirm_url", array('!username' => $user->name, '!site' => variable_get('site_name', 'Drupal'), '!confirm_url' => url('vk/confirm/' . $user->uid . '/' . md5($user->created . $user->mail), array('absolute' => TRUE)))),
    'headers' => array(
      'MIME-Version'              => '1.0',
      'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer'                  => 'Drupal'
    )
  );
  if (drupal_mail_send($message)) {
    return TRUE;
  }
  return FALSE;
}

function _vk_confirm_email() {
  $args = arg();
  
  $account = user_load(array('uid' => $args[2]));
  
  if (!$vk_data['confirmed']) {
    if ($args[3] == md5($account->created . $account->mail)) {
      drupal_set_message(t('E-mail succesfully confirmed'));
      $user_data = unserialize($account->data);
      $vk_data = $user_data['vk_data'];
      $vk_data['confirmed'] = TRUE;
      $array = array('status' => 1, 'vk_data' => $vk_data);
      user_save($account, $array);
      
      global $user;
      if (!$user->uid) {
        user_external_login($account);
      }
    }
    else {
      drupal_set_message(t('E-mail confirmation error', 'error'));
    }
  }
  else {
    drupal_set_message('You already cinfirm your e-mail');
  }
  
  return "";
}

/**
 * Implementation of hook_cron().
 */
function vk_openapi_cron() {
  if (variable_get('vk_openapi_oblige_users_to_enter_email', 0)) {
    $q = db_query("SELECT * FROM {vkontakte_users}");
    while ($r = db_fetch_object($q)) {    
      $user = user_load(array('uid' => $r->uid));
      $user_data = unserialize($user->data);
      $vk_data = $user_data['vk_data'];
      if ($vk_data['vk_confirm_email_sent']) {
        // if confirmation e-mail was sent...
        if (!$vk_data['confirmed'] && $user->created + variable_get('vk_openapi_cinfirm_time', 86400) < time()) {
          // ...and user not confirmed own e-mail
          db_query('UPDATE {users} SET status = 0 WHERE uid = %d', $r->uid);
        }
      }
    }
  }
}

function vk_user_data($account) {
  drupal_set_title(check_plain($account->name));
  $user_data = unserialize($account->data);
  if ($user_data['vk_data']) {
    $output = t('You already unite your account with <a href="!url">vkontakte.ru account</a>.', array('!url' => 'http://vkontakte.ru/id' . $user_data['vk_data']['vkuid']));
  }
  else {
    global $user;
    if ($user->uid == $account->uid) {
      drupal_add_js(drupal_get_path('module', 'vk_openapi') . "/openapi.js");
      drupal_add_css(drupal_get_path('module', 'vk_openapi') . "/vk_openapi.css");
      $output = t('You can unite your current account with your vkontakte.ru account:');
      $output .= '<div id="vk_login" class="vk_login" style="margin: 0 auto 20px auto;" onclick="doUnite();"></div>';
      $output .= theme('vk_openapi_init_anon', $user, base_path() . "vk/xd_receiver", trim(variable_get('vk_openapi_app_id', '')));
    }
    else {
      $output = t('This account not united with any VKontakte account.');
    }
  }
  return $output;
}